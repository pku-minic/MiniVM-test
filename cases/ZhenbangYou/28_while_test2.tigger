f_FourWhile [0] [26]
t0 = 5
store t0 8
t0 = 6
store t0 9
t0 = 7
store t0 10
t0 = 10
store t0 11
l0:
load 8 t1
t2 = 20
t0 = t1 < t2
store t0 12
load 12 t0
if t0 == x0 goto l3
goto l1
l3:
goto l2
l1:
load 8 t1
t2 = 3
t0 = t1 + t2
store t0 13
load 13 t0
store t0 8
l4:
load 9 t1
t2 = 10
t0 = t1 < t2
store t0 14
load 14 t0
if t0 == x0 goto l7
goto l5
l7:
goto l6
l5:
load 9 t1
t2 = 1
t0 = t1 + t2
store t0 15
load 15 t0
store t0 9
l8:
load 10 t1
t2 = 7
t0 = t1 == t2
store t0 16
load 16 t0
if t0 == x0 goto l11
goto l9
l11:
goto l10
l9:
load 10 t1
t2 = 1
t0 = t1 - t2
store t0 17
load 17 t0
store t0 10
l12:
load 11 t1
t2 = 20
t0 = t1 < t2
store t0 18
load 18 t0
if t0 == x0 goto l15
goto l13
l15:
goto l14
l13:
load 11 t1
t2 = 3
t0 = t1 + t2
store t0 19
load 19 t0
store t0 11
goto l12
l14:
load 11 t1
t2 = 1
t0 = t1 - t2
store t0 20
load 20 t0
store t0 11
goto l8
l10:
load 10 t1
t2 = 1
t0 = t1 + t2
store t0 21
load 21 t0
store t0 10
goto l4
l6:
load 9 t1
t2 = 2
t0 = t1 - t2
store t0 22
load 22 t0
store t0 9
goto l0
l2:
load 9 t1
load 11 t2
t0 = t1 + t2
store t0 23
load 8 t1
load 23 t2
t0 = t1 + t2
store t0 24
load 24 t1
load 10 t2
t0 = t1 + t2
store t0 25
load 25 a0
return
return
end f_FourWhile
f_main [0] [9]
call f_FourWhile
store a0 8
load 8 a0
return
return
end f_main
